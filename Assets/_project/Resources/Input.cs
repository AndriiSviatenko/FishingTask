//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/_project/Resources/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""Fishing"",
            ""id"": ""c577f4e9-13d1-4784-b908-b92d9a2663fe"",
            ""actions"": [
                {
                    ""name"": ""Grab"",
                    ""type"": ""Value"",
                    ""id"": ""9cca8373-5a18-4e03-8840-122fbaa7e81f"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StartActiveFish"",
                    ""type"": ""Button"",
                    ""id"": ""8608baef-688e-468f-bad5-ec397f4fdfd5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""42065b64-dce7-4735-b3e0-a4bd5f6672eb"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71eb662f-1071-4853-9469-8239b9dd698e"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartActiveFish"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Rotate"",
            ""id"": ""b49db8ce-f7dc-4187-9131-a09454399069"",
            ""actions"": [
                {
                    ""name"": ""GetRotate"",
                    ""type"": ""Value"",
                    ""id"": ""4ddb0dfc-129e-4d93-81a5-eb0300031b0a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""31a3a888-aaf2-467b-a500-7dd023bb691b"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GetRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Fishing
        m_Fishing = asset.FindActionMap("Fishing", throwIfNotFound: true);
        m_Fishing_Grab = m_Fishing.FindAction("Grab", throwIfNotFound: true);
        m_Fishing_StartActiveFish = m_Fishing.FindAction("StartActiveFish", throwIfNotFound: true);
        // Rotate
        m_Rotate = asset.FindActionMap("Rotate", throwIfNotFound: true);
        m_Rotate_GetRotate = m_Rotate.FindAction("GetRotate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Fishing
    private readonly InputActionMap m_Fishing;
    private List<IFishingActions> m_FishingActionsCallbackInterfaces = new List<IFishingActions>();
    private readonly InputAction m_Fishing_Grab;
    private readonly InputAction m_Fishing_StartActiveFish;
    public struct FishingActions
    {
        private @Input m_Wrapper;
        public FishingActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Grab => m_Wrapper.m_Fishing_Grab;
        public InputAction @StartActiveFish => m_Wrapper.m_Fishing_StartActiveFish;
        public InputActionMap Get() { return m_Wrapper.m_Fishing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FishingActions set) { return set.Get(); }
        public void AddCallbacks(IFishingActions instance)
        {
            if (instance == null || m_Wrapper.m_FishingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FishingActionsCallbackInterfaces.Add(instance);
            @Grab.started += instance.OnGrab;
            @Grab.performed += instance.OnGrab;
            @Grab.canceled += instance.OnGrab;
            @StartActiveFish.started += instance.OnStartActiveFish;
            @StartActiveFish.performed += instance.OnStartActiveFish;
            @StartActiveFish.canceled += instance.OnStartActiveFish;
        }

        private void UnregisterCallbacks(IFishingActions instance)
        {
            @Grab.started -= instance.OnGrab;
            @Grab.performed -= instance.OnGrab;
            @Grab.canceled -= instance.OnGrab;
            @StartActiveFish.started -= instance.OnStartActiveFish;
            @StartActiveFish.performed -= instance.OnStartActiveFish;
            @StartActiveFish.canceled -= instance.OnStartActiveFish;
        }

        public void RemoveCallbacks(IFishingActions instance)
        {
            if (m_Wrapper.m_FishingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFishingActions instance)
        {
            foreach (var item in m_Wrapper.m_FishingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FishingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FishingActions @Fishing => new FishingActions(this);

    // Rotate
    private readonly InputActionMap m_Rotate;
    private List<IRotateActions> m_RotateActionsCallbackInterfaces = new List<IRotateActions>();
    private readonly InputAction m_Rotate_GetRotate;
    public struct RotateActions
    {
        private @Input m_Wrapper;
        public RotateActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @GetRotate => m_Wrapper.m_Rotate_GetRotate;
        public InputActionMap Get() { return m_Wrapper.m_Rotate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RotateActions set) { return set.Get(); }
        public void AddCallbacks(IRotateActions instance)
        {
            if (instance == null || m_Wrapper.m_RotateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RotateActionsCallbackInterfaces.Add(instance);
            @GetRotate.started += instance.OnGetRotate;
            @GetRotate.performed += instance.OnGetRotate;
            @GetRotate.canceled += instance.OnGetRotate;
        }

        private void UnregisterCallbacks(IRotateActions instance)
        {
            @GetRotate.started -= instance.OnGetRotate;
            @GetRotate.performed -= instance.OnGetRotate;
            @GetRotate.canceled -= instance.OnGetRotate;
        }

        public void RemoveCallbacks(IRotateActions instance)
        {
            if (m_Wrapper.m_RotateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRotateActions instance)
        {
            foreach (var item in m_Wrapper.m_RotateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RotateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RotateActions @Rotate => new RotateActions(this);
    public interface IFishingActions
    {
        void OnGrab(InputAction.CallbackContext context);
        void OnStartActiveFish(InputAction.CallbackContext context);
    }
    public interface IRotateActions
    {
        void OnGetRotate(InputAction.CallbackContext context);
    }
}
